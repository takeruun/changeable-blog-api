// Code generated by MockGen. DO NOT EDIT.
// Source: service/session_store.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sessions "github.com/gorilla/sessions"
)

// MockSessionStoreServiceRepository is a mock of SessionStoreServiceRepository interface.
type MockSessionStoreServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreServiceRepositoryMockRecorder
}

// MockSessionStoreServiceRepositoryMockRecorder is the mock recorder for MockSessionStoreServiceRepository.
type MockSessionStoreServiceRepositoryMockRecorder struct {
	mock *MockSessionStoreServiceRepository
}

// NewMockSessionStoreServiceRepository creates a new mock instance.
func NewMockSessionStoreServiceRepository(ctrl *gomock.Controller) *MockSessionStoreServiceRepository {
	mock := &MockSessionStoreServiceRepository{ctrl: ctrl}
	mock.recorder = &MockSessionStoreServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStoreServiceRepository) EXPECT() *MockSessionStoreServiceRepositoryMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockSessionStoreServiceRepository) GetSession(ctx context.Context, name string) (*sessions.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, name)
	ret0, _ := ret[0].(*sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionStoreServiceRepositoryMockRecorder) GetSession(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionStoreServiceRepository)(nil).GetSession), ctx, name)
}

// GetValue mocks base method.
func (m *MockSessionStoreServiceRepository) GetValue(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockSessionStoreServiceRepositoryMockRecorder) GetValue(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockSessionStoreServiceRepository)(nil).GetValue), ctx, key)
}

// SaveSession mocks base method.
func (m *MockSessionStoreServiceRepository) SaveSession(ctx context.Context, session *sessions.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockSessionStoreServiceRepositoryMockRecorder) SaveSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockSessionStoreServiceRepository)(nil).SaveSession), ctx, session)
}

// SaveValue mocks base method.
func (m *MockSessionStoreServiceRepository) SaveValue(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValue", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValue indicates an expected call of SaveValue.
func (mr *MockSessionStoreServiceRepositoryMockRecorder) SaveValue(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValue", reflect.TypeOf((*MockSessionStoreServiceRepository)(nil).SaveValue), ctx, key, value)
}
